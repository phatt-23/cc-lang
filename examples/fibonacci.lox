// recursive fibonacci, very expensive
fun fib(n) {
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

// iterative fibonacci, very fast
fun fib_iter(n) {
    var a = 0;
    var temp;
    var b = 1;
    for (var i = 0; i < n; i = i + 1) {
        temp = a;
        a = b;
        b = b + temp;
    }
    return a;
}

print fib(10);

{
    var recursive_fib = true;

    if (recursive_fib) {

        print "fibonacci recursive";
        for (var i = 0; i < 25; i = i + 1) {
            print fib(i);
        }

    } else {

        print "fibonacci iterative";
        for (var i = 0; i < 25; i = i + 1) {
            print fib_iter(i);
        }

    }  

}


var a = "global";

{
    print a;

    fun mutate_global() {
        a = "block";
    }

    mutate_global();
    print a;

}